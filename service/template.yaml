Resources:
  Websocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Websocket
      Name: !Sub
        - ${StackTagName}-${EnvironmentTagName}-${ResourceName}
        - ResourceName: Websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebsocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Websocket
      AutoDeploy: true
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefaultRouteSettings:
        LoggingLevel: ERROR
  WebsocketRouteconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Websocket
      AuthorizationType: AWS_IAM
      RouteKey: $connect
      Target: !Sub integrations/${WebsocketRouteconnectIntegration}
  WebsocketRouteconnectIntegrationIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Description: Role to add new fireplace API clients
      Policies:
        - PolicyName: PutFireplaceClientRecord
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !GetAtt State.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys:
                      - clients
  WebsocketRouteconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Websocket
      CredentialsArn: !GetAtt WebsocketRouteconnectIntegrationIAMRole.Arn
      Description: Route to add an API client
      IntegrationMethod: POST
      IntegrationType: AWS
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem
      RequestTemplates:
        saveClientRecord: !Sub |-
          {
            "TableName": "${State}",
            "Item": {
              "hashKey": {
                "S": "clients"
              },
              "sortKey": {
                "S": "$context.connectionId"
              },
              "connectedAt": {
                "N": "$context.connectedAt"
              }
            }
          }
      TemplateSelectionExpression: saveClientRecord
  WebsocketRouteconnectResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref Websocket
      RouteId: !Ref WebsocketRouteconnect
      RouteResponseKey: $default
  WebsocketRouteconnectIntegrationResponseSuccess:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref Websocket
      IntegrationId: !Ref WebsocketRouteconnectIntegration
      IntegrationResponseKey: /200/
  WebsocketRoutedisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Websocket
      RouteKey: $disconnect
      Target: !Sub integrations/${WebsocketRoutedisconnectIntegration}
  WebsocketRoutedisconnectIntegrationIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Description: Role to delete fireplace API clients
      Policies:
        - PolicyName: DeleteFireplaceClientRecord
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:DeleteItem
                Resource: !GetAtt State.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys:
                      - clients
  WebsocketRoutedisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Websocket
      CredentialsArn: !GetAtt WebsocketRoutedisconnectIntegrationIAMRole.Arn
      Description: Route to delete an API client
      IntegrationMethod: POST
      IntegrationType: AWS
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/DeleteItem
      RequestTemplates:
        deleteClientRecord: !Sub |-
          {
            "TableName": "${State}",
            "Key": {
              "hashKey": {
                "S": "clients"
              },
              "sortKey": {
                "S": "$context.connectionId"
              }
            }
          }
      TemplateSelectionExpression: deleteClientRecord
  WebsocketRoutesetState:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Websocket
      ModelSelectionExpression: setState
      RequestModels:
        setState: setState
      RouteKey: setState
      Target: !Sub integrations/${WebsocketRoutesetStateIntegration}
    DependsOn: WebsocketRoutesetStateRequestModel
  WebsocketRoutesetStateRequestModel:
    Type: AWS::ApiGatewayV2::Model
    Properties:
      ApiId: !Ref Websocket
      ContentType: application/json
      Description: setState route request model
      Name: setState
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: setState
        type: object
        properties:
          action:
            enum:
              - setState
          level:
            enum:
              - '0'
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
              - '6'
        required:
          - action
          - level
  WebsocketRoutesetStateResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref Websocket
      RouteId: !Ref WebsocketRoutesetState
      RouteResponseKey: $default
  WebsocketRoutesetStateIntegrationIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Description: Role to add new fireplace states
      Policies:
        - PolicyName: PutFireplaceStateRecord
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !GetAtt State.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys:
                      - fireplaceStates
  WebsocketRoutesetStateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Websocket
      CredentialsArn: !GetAtt WebsocketRoutesetStateIntegrationIAMRole.Arn
      Description: Route to set the fireplace state
      IntegrationMethod: POST
      IntegrationType: AWS
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem
      RequestTemplates:
        setState: !Sub |-
          #set( $expiration = $context.requestTimeEpoch / 1000 + 30 * 24 * 60 * 60 )
          {
            "TableName": "${State}",
            "Item": {
              "hashKey": {
                "S": "fireplaceStates"
              },
              "sortKey": {
                "S": "$context.requestTimeEpoch"
              },
              "level": {
                "S": "$input.path('$.level')"
              },
              "clientId": {
                "S": "$context.connectionId"
              },
              "expiration": {
                "N": "$expiration"
              }
            }
          }
      TemplateSelectionExpression: setState
  WebsocketRoutesetStateIntegrationResponseSuccess:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref Websocket
      IntegrationId: !Ref WebsocketRoutesetStateIntegration
      IntegrationResponseKey: /200/
      ResponseTemplates:
        success: |-
          {
            "status": "success",
            "timestamp": $context.requestTimeEpoch
          }
      TemplateSelectionExpression: success
  WebsocketRoutesetStateIntegrationResponseFailure:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref Websocket
      IntegrationId: !Ref WebsocketRoutesetStateIntegration
      IntegrationResponseKey: $default
      ResponseTemplates:
        failure: |-
          {
            "status": "failure",
            "timestamp": $context.requestTimeEpoch,
            "error": {
              "type": "$.input.path('$.__type')",
              "message": "$.input.path('$.message')"
            }
          }
      TemplateSelectionExpression: failure
  WebsocketClientUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: ConnectToWebsocketAPI
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Websocket}/${EnvironmentAPIGatewayStageName}/$connect
  State:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: hashKey
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: hashKey
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
  HandleStateUpdates:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-HandleStateUpdates
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: HandleStateUpdates
      CodeUri: src/HandleStateUpdates
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref State
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Websocket}/${EnvironmentAPIGatewayStageName}/POST/@connections
      Events:
        State:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt State.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          TABLE_NAME: !Ref State
          TABLE_ARN: !GetAtt State.Arn
          API_URL: !Sub wss://${Websocket}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentAPIGatewayStageName}
          API_CONNECTIONS_ENDPOINT: !Sub https://${Websocket}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentAPIGatewayStageName}
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
Transform: AWS::Serverless-2016-10-31